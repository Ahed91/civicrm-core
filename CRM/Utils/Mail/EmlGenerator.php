<?php
/*
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC. All rights reserved.                        |
 |                                                                    |
 | This work is published under the GNU AGPLv3 license with some      |
 | permitted exceptions and without any warranty. For full license    |
 | and copyright information, see https://civicrm.org/licensing       |
 +--------------------------------------------------------------------+
 */

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 */

/**
 * Class CRM_Utils_Mail_EmlGenerator.
 *
 * Generates eml file from mail data (ezcMail object).
 */
class CRM_Utils_Mail_EmlGenerator {

  /**
   * Email data.
   *
   * Normally this is an object returned by $mailStore->fetchNext().
   *
   * @var ezcMail
   */
  private $mail;

  /**
   * Eml generated from original email data (see $mail).
   *
   * @var  string
   */
  private $eml;

  /**
   * Email timestamp.
   *
   * @var int
   */
  private $time;

  /**
   * CRM_Utils_Mail_EmlGenerator constructor.
   *
   * @param ezcMail $mail
   *   Email data.
   */
  public function __construct($mail) {
    $this->mail = $mail;
  }

  /**
   * Generates eml from original email data.
   *
   * @return string
   *   Email data in eml format.
   *
   * @throws \ezcBasePropertyNotFoundException
   *   Property not found exception from ezcMailPart class.
   */
  public function generateEml() {
    // Be careful when using $this->mail->generate() to generate eml, as it has
    // one disadvantage: the date in the headers would represent current time,
    // but not actual email time.
    // We can get real date from $this->mail object, but we need to do it before
    // calling generate() as mail object date would be changed after that.
    $this->time = $this->time ?? $this->mail->__get('timestamp') ?? time();
    $this->eml = $this->replaceDate($this->mail->generate());

    return $this->eml;
  }

  /**
   * Attaches eml file to activity.
   *
   * Make sure to call generateEml() method before calling this function to
   * actually generate contents for the file that would be attached.
   * We had to split this logic, because of the processing in
   * CRM_Utils_Mail_EmailProcessor->_process(): it moves all mail attachments
   * from their original location (/tmp) to uploads folder on some step,
   * so the eml would be generated without attachments if we call this method
   * after activity is created.
   *
   * @param $activity_id
   *   Activity id.
   *
   * @return array|false
   *   Attached file data, or FALSE in case of error.
   *
   * @throws \CiviCRM_API3_Exception
   *   An exception generated by civicrm_api3().
   * @throws \ezcBasePropertyNotFoundException
   *   Property not found exception from mail object.
   */
  public function attachEmlToActivity($activity_id) {
    if (!$activity_id || !$this->eml) {
      return FALSE;
    }

    $result = civicrm_api3('Attachment', 'create', [
      'sequential' => 1,
      'entity_table' => 'civicrm_activity',
      'entity_id' => $activity_id,
      'mime_type' => 'message/rfc822',
      'name' => $this->generateEmlFileName(),
      'content' => $this->eml,
    ]);

    // Set file type to attached file.
    // (The file_type_id db table column is always NULL and not used in civicrm
    // at all. But we need to set some flag to differentiate original email from
    // other attached files (and disable edit/delete for this file later), so we
    // will use that field for this purpose and just set 1 as a value)
    if (!empty($result['id'])) {
      civicrm_api3('File', 'create', [
        'id' => $result['id'],
        'file_type_id' => $this->getOriginalEmailFileTypeId(),
      ]);
    }

    return $result['values'][0] ?? [];
  }

  /**
   * Generate name for eml file.
   *
   * @param ezcMail|null $mail
   *   (Optional) Email data. If set to NULL then $this->mail would be used.
   *
   * @return string
   *   File name (including extension) for original email eml file.
   *
   * @throws \ezcBasePropertyNotFoundException
   *   Property not found exception from mail object.
   */
  private function generateEmlFileName($mail = NULL) {
    $mail = $mail ?? $this->mail;
    $res = date('Ymd_Hi_', $this->time)
      . preg_replace('!\W+!', '', trim(strtolower($mail->__get('subject'))));
    // Avoid too long file names.
    $res = substr($res, 0, 128) . '.eml';

    return $res;
  }

  /**
   * Replaces the date in eml headers.
   *
   * @param string|null $eml
   *   (Optional) Whole email data in eml format, or email headers only.
   *   If not set then $this->eml would be used;
   * @param string|null $newDate
   *   (Optional) New date value in DATE_RFC822 format. If not set then would
   *   be retrieved with $this->formatDate().
   *
   * @return string
   *   Eml with changed date in headers.
   *
   * @throws \ezcBasePropertyNotFoundException
   *   Property not found exception from ezcMailPart class.
   */
  private function replaceDate($eml = NULL, $newDate = NULL) {
    $eml = $eml ?? $this->eml;
    $newDate = $newDate ?? $this->formatDate();
    $oldDate = $this->extractDate($eml);

    if ($newDate && $oldDate) {
      $eml = str_replace($oldDate, $newDate, $eml);
    }

    return $eml;
  }

  /**
   * Extracts date from eml headers.
   *
   * @param string|null $eml
   *   (Optional) Whole email data in eml format, or email headers only.
   *   If not set then $this->eml would be used;
   *
   * @return string
   *   Date from email headers, normally in RFC822 format.
   */
  private function extractDate($eml = NULL) {
    $eml = $eml ?? $this->eml;
    preg_match('!Date:\s*(.+)\n!iU', $eml, $matches);
    return trim($matches[1] ?? '');
  }

  /**
   * Returns formatted date that could be used in eml headers.
   *
   * @param int|null $time
   *   (Optional) Timestamp to format date from. If not set then $this->time
   *   would be used.
   *
   * @return string
   *   Date in RFC822 format.
   */
  private function formatDate($time = NULL) {
    return date(DATE_RFC822, $time ?? $this->time ?? time());
  }

  /**
   * Returns id of 'Original email' file type.
   *
   * @return int
   *   The id of 'Original email' file type.
   */
  private function getOriginalEmailFileTypeId() {
    // The file_type_id column exists in civicrm_file db table, but never used
    // and there are no actual types defined. So let's return a value directly.
    return 1;
  }

}
